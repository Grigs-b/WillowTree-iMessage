//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Ryan Grigsby on 6/14/16.
//  Copyright Â© 2016 Grigs-b. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {

    private var nameService: NameService!

    // MARK: - Conversation Handling
    override func willBecomeActive(with conversation: MSConversation) {
        super.willBecomeActive(with: conversation)

        nameService = APINameService()
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(with: presentationStyle, nameService: nameService)
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        //        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }

        // Present the view controller appropriate for the conversation and presentation style.
        presentViewController(with: presentationStyle, nameService: nameService)
    }


    private func presentViewController(with presentationStyle: MSMessagesAppPresentationStyle, nameService: NameService) {

        let controller: UIViewController
        if presentationStyle == .compact {
            controller = WillowTreeCollectionViewController.build(nameService: nameService, delegate: self)
        } else {
            //NEXT: different functionality for compact vs. expanded
            controller = WillowTreeCollectionViewController.build(nameService: nameService, delegate: self)
        }

        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }

        // Embed the new controller.
        addChildViewController(controller)

        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)

        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true

        controller.didMove(toParentViewController: self)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        super.didReceive(message, conversation: conversation)
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

extension MessagesViewController: WillowTreeCollectionViewDelegate {
    func didSelectPerson(_ person: Person, withController controller: WillowTreeCollectionViewController) {


        // NEXT
    }
}
